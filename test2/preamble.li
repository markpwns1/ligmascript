
-- TODO: allow
--  let x.y = whatever

-- let none = {
--     .bind = \. -> none;
--     .is_none = true;
-- }

-- let some = proto {
--     .constructor = \value -> { .value };
--     .bind = \fn => maybe (fn self.value);
--     .is_none = false;
-- }

-- let boxed = proto {
--     .constructor = \value -> { .value };
--     .bind = \fn => boxed (fn self.value);
-- }

-- -- let state = proto {
-- --     .constructor = \
-- -- }

-- let pass = {
--     .bind = \fn => fn!
-- }

-- let maybe = \x -> cases
--     | x == nil or x == none, none
--     | else, cases
--         | is_subclass x some, x
--         | else, some x

-- let put = \x -> do io.write x then pass
-- let putln = \x -> do print x then pass
-- let read = \x = "*line" -> boxed (io.read x)

-- returns true if a predicate holds for every element 
-- in an array
let export all = \a, f -> cases
    | len a == 0 -> true
    | else -> f a #1 & all (tail a) f

-- returns true if a predicate holds for any element
-- in an array
let export any = \a, f -> cases
    | len a == 0 -> false
    | else -> f a #1 or any (tail a) f

-- applies a function to every element in an array
-- and returns the result
let export map = \a, f -> [ f x | x <- a ]

-- returns an array containing only the elements
-- that satisfy a predicate
let export filter = \a, f -> [ x | x <- a, f x ]

-- equivalent to map, but passes the index of each
-- element to the function as well
let export map_i = \a, f, i = 1 -> cases
    | len a == 0 -> []
    | else -> [f (head a) i] ++ map_i (tail a) f (i + 1)

-- copies a slice of an array starting from "first" to optionally "last"
let export slice = \b, first, last = len b -> cases
    | type b == "string" -> string.sub b first last
    | else -> cases
        | first >= last -> [ b #first ]
        | else -> [ b #first ] ++ slice b (first + 1) last

-- standard right fold
let export foldr = \a, v, f, i = 1 -> 
    let n = len a in cases
        | n == 0 -> v
        | else -> f (head a) (foldr (tail a) v f (i + 1)) i

-- standard left fold
-- let export foldl = \a, v, f, i = 1 -> 
--     let n = len a in cases
--         | n == 0 -> v
--         | else -> foldl (tail a) (f v (head a) i) f (i + 1)

let export foldl = \a, v, f, i = 1 -> match a 
    | [] -> v
    | [ $x ::: $xs ] -> foldl xs (f v x i) f (i + 1)
    | else -> error "foldl: expected array" 2

-- creates an array [ 1, 2 ... n ]
-- has three overloads:
--  - range n
--  - range first last
--  - range first last step
let export range = \a, b, step = 1 -> 
    let [ first, last ] = cases
        | b == ! -> [ 1, a ]
        | else -> [ a, b ]
    in cases
        | first == last -> [ first ]
        | last < first -> [ ]
        | else -> [ first ] ++ range (first + step) last step

let export pack = \x... -> x

let export is_array = \t -> 
    type t == "table" & all (pairset t) \kv -> 
        let [ k, _ ] = kv in type k == "number"

let export flatten = \a -> foldl a [] (\l, r -> cases
    | is_array r -> l ++ (flatten r)
    | else -> l ++ [r]) 

let export shallow_flatten = \a -> foldl a [] (\l, r -> cases
    | is_array r -> l ++ r
    | else -> l ++ [r]) 

let export sole = \a -> a # (len a)
    
let export member = \a, x -> any a (\y -> y == x)

set string.join = \a, sep = "" -> 
    let [ h ::: t ] = a in 
    foldl t (h or "") (\l, r -> l .. sep .. r)