
--[
import "serialise.li"

let vec2 = proto {
    .constructor = \x, y -> { .x, .y },
    .__tostring = => "(${@x}, ${@y})"
}

let vec3 = proto {
    .constructor = \x, y, z -> { .x, .y, .z },
    .__tostring = => "(${@x}, ${@y}, ${@z})"
}

let f = \t, accept_hi = false -> match t
    | "hello" 
    | "hi", accept_hi == true 
        -> print "hello!!!"
    | { $x, $y, $z? }, y == 1 + 2 
        -> print $ x + y + (z or 0)
    | vec2 :: $x 
        -> print x
    | else 
        -> print "no match!"

-- prints (6, 7) then 9 then "no match!" then "hello!!!"
let main = -> 
    let [a, b] = [vec2 6 7, vec3 2 3 4] in do 
        f a ;
        f b ;
        f "hi" ;
        f "hi" true
    end
    
]

-- import "monad.li"

-- let f = \x -> match x
--     | some :: [$x] -> print x
--     | else -> print "none"

-- let main = -> do 
--     f (some 5) ;
--     f none
-- end

-- import "file.li"
-- import "serialise.li"

-- let main = -> show (file_open "monad.li" "r")
--     -- | $f -> print "file opened with contents:\n${ f:read "a" }"
--     -- | else -> print "file not opened"

let export foldl = \a, v, f, i = 1 -> match a 
    | [] -> v
    | [ $x ::: $xs ] -> foldl xs (f v x i) f (i + 1)
    | else -> error "foldl: expected array" 2


