{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "ligmascript",
	"patterns": [
		{
			"include": "#scope"
		}
	],
	"repository": {
		"scope": {
			"patterns": [
				{
					"include": "#letstmt"
				},
				{
					"include": "#keywords"
				},
				{
					"include": "DISABLED #selftype"
				},
				{
					"include": "DISABLED #functypes"
				},
				{
					"include": "DISABLED #classdef"
				},
				{
					"include": "DISABLED #funccall_excl"
				},
				{
					"include": "DISABLED #funccall"
				},
				{
					"include": "#members"
				},
				{
					"include": "#self"
				},
				{
					"include": "#strings"
				},
				{
					"include": "#constants"
				},
				{
					"include": "#comment block"
				},
				{
					"include": "#comment"
				},
				{
					"include": "#funcs"
				},
				{
					"include": "#numbers"
				},
				{
					"include": "#objindex"
				},
				{
					"include": "DISABLED #arrayindex"
				}
			]
		},
		"coolfunccall": {
			"match": "([_a-zA-Z][_a-zA-Z0-9]*)\\s*[^\\s]+",
			"captures": {
				"1": {
					"name": "entity.name.function"
				}
			}
		},
		"classdef": {
			"match": "(prototype)\\s*([_a-zA-Z][_a-zA-Z0-9]*)\\s*((from)\\s*([_a-zA-Z][_a-zA-Z0-9]*))?",
			"captures": {
				"1": {
					"name": "keyword.control"
				},
				"2": {
					"name": "support.class"
				},
				"4": {
					"name": "keyword.control"
				},
				"5": {
					"name": "support.class"
				}
			}
		},
		"functypes": {
			"match": "([_a-zA-Z][_a-zA-Z0-9]*)\\s*:\\s*([_a-zA-Z][_a-zA-Z0-9]*)\\s*(\\=\\>|\\=|\\,|\\)|:=>|(\\[[_a-zA-Z][_a-zA-Z0-9]*\\]))",
			"captures": {
				"1": {
					"name": "variable.parameter"
				},
				"2": {
					"name": "support.class"
				},
				"3": {
					"name": "keyword.other"
				},
				"4": {
					"name": "keyword.other"
				}
			}
		},
		"selftype": {
			"match": "\\[([_a-zA-Z][_a-zA-Z0-9]*)\\]\\s*(:=>)",
			"captures": {
				"1": {
					"name": "support.class"
				},
				"2": {
					"name": "keyword.other"
				}
			}
		},
		"members": {
			"match": "(@)([a-zA-Z_][a-zA-Z0-9_]*)",
			"name": "variable.other.constant"
		},
		"self": {
			"match": "@",
			"name": "variable.other.constant"
		},
		"stringformat": {
			"begin": "(\\$\\{)",
			"end": "(})",
			"beginCaptures": {
				"1": {
					"name": "keyword.other"
				}
			},
			"endCaptures": {
				"1": {
					"name": "keyword.other"
				}
			},
			"patterns": [
				{
					"include": "#scope"
				}
			]
		},
		"funcargs": {
			"begin": "\\(([a-zA-Z_][a-zA-Z0-9_]*)\\s*",
			"end": "\\)",
			"beginCaptures": {
				"1": {
					"name": "variable.parameter"
				}
			},
			"patterns": [
				{
					"include": "#funcarg"
				},
				{
					"include": "#scope"
				}
			]
		},
		"funcarg": {
			"match": "[a-zA-Z_][a-zA-Z0-9_]*",
			"name": "variable.parameter"
		},
		"objindex": {
			"match": "\\.([a-zA-Z_][a-zA-Z0-9_]*)",
			"captures": {
				"1": {
					"name": "variable.parameter"
				}
			}
		},
		"arrayindex": {
			"match": "(#)([a-zA-Z_][a-zA-Z0-9_]*)",
			"name": "variable.parameter"
		},
		"numbers": {
			"name": "constant.numeric",
			"match": "[0-9]+(\\.[0-9]+)?"
		},
		"keywords": {
			"name": "keyword.control.ligmascript",
			"match": "\\b(import|cases|end|then|do|export|if|while|for|in|return|with|else|try|match|break|continue|use|print)\\b"
		},
		"constants": {
			"name": "keyword.other.ligmascript",
			"match": "(\\b(not|unset|true|false|let|set|self|nil|@|super)\\b)|->|=>"
		},
		"strings": {
			"begin": "(\")",
			"end": "(\")",
			"beginCaptures": {
				"1": {
					"name": "string.quoted.double.ligmascript"
				}
			},
			"endCaptures": {
				"1": {
					"name": "string.quoted.double.ligmascript"
				}
			},
			"patterns": [
				{
					"include": "#stringformat"
				},
				{
					"name": "constant.character.escape.ligmascript",
					"match": "\\\\."
				},
				{
					"name": "string.quoted.double.ligmascript",
					"match": "."
				}
			]
		},
		"comment block": {
			"name": "comment.block.ligmascript",
			"begin": "\\-\\-\\[",
			"end": "\\]",
			"patterns": [
				{
					"include": "#comment block"
				},
				{
					"begin": "\\[",
					"end": "\\]",
					"name": "comment.block.ligmascript"
				}
			]
		},
		"comment": {
			"name": "comment.line.double-slash.ligmascript",
			"begin": "\\-\\-",
			"end": "\n"
		}
	},
	"scopeName": "source.ligmascript"
}